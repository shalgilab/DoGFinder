#!/usr/bin/env python2
from __future__ import division
import pybedtools
import numpy as np
import sys
import pandas as pd
import itertools
import os.path
import argparse
import DoGs_functions
import pysam
import commands

#This program calculate DoGs rpkm

parser = argparse.ArgumentParser()
parser.add_argument('-out', action='store', dest='outpath', help='output dir',type=str)
parser.add_argument('-bam', action='store', dest='readspath', help='Sorted downsampled bam file ',type=str)
parser.add_argument('-s', action='store_true', default=False, dest='strand', help='strand specific, default is False')
parser.add_argument('-dog', action='store', dest='annotation', help='DoGs annotation file',type=str)
parser.add_argument('-suff', action='store', dest='base_name',default='', help='Suffix to add to output file',type=str)
parser.add_argument('-genome', dest = 'genome', default = '', help = "Chromosomesize file", type = str)

usr_input = parser.parse_args() 

path_bam=usr_input.readspath 
output_path=usr_input.outpath
path_annotation=usr_input.annotation
out_name=usr_input.base_name

if output_path is None:
	print "Error: No -out argument"
	sys.exit()
if path_bam is None:
	print "Error: No -bam argument"
	sys.exit()
if path_annotation is None:
	print "Error: No -a argument"
	sys.exit()

if output_path[-1]=='/'  and len(output_path)>0:
	output_path=output_path[:-1]

S=usr_input.strand
G=usr_input.genome

if out_name is not '':
	out_name='_'+out_name

if  not(os.path.isfile(path_annotation)):
    print "No annotation file in : ",path_annotation
    sys.exit()

if  not(os.path.exists(output_path)):
    print "No output directory at : ",output_path
    sys.exit()

if  not(os.path.isfile(path_bam)):
    print "No bam file in : ",path_bam
    sys.exit()

print "\n-----------------------------------------------------Get DoGs RPKM-------------------------------------------------------------------------"
print "\nPath of reads : %s "%(path_bam)
print "DoGs annotation file: %s "%(path_annotation)
print "Output will be at: %s/"%(output_path)
if S:
	print "Strand specific \n"
else:
	print "Not Strand specific \n"

if  not(os.path.isfile(path_bam+".bai")):
	print "No index file: %s ....creating one" %(path_bam+".bai")
	pysam.index(path_bam)
else :
	print "Found index file: %s" %(path_bam+".bai")

print "\nCounting all mapped reads... "


#check bedtools version
bed_strng=commands.getstatusoutput('bedtools --version')
version=int(filter(str.isdigit, bed_strng[1]))

#bam file with all reads:
reads= pybedtools.BedTool(path_bam);

#annotation file:
idx_stat = pysam.idxstats(path_bam)
stat_string=idx_stat.split("\n")
stat_string=stat_string[:-2]
df_genome=pd.DataFrame(stat_string)
df_genome['chrom'], df_genome['length'], df_genome['mapped_reads'], df_genome['non'] = zip(*df_genome[0].map(lambda x: x.split('\t')))
df_genome=df_genome[['chrom','length']]
genome=df_genome
genome.columns=range(0,len(genome.columns))

base_name=os.path.basename(path_bam)

genome_path=output_path+'/'+base_name.split(".bam")[0]+'_'+'genome.txt'
df_genome.to_csv(genome_path, header=None, index=None, sep='\t')

annot = pybedtools.BedTool(path_annotation);
annot_sort=annot.sort(faidx=genome_path)
os.remove(genome_path)

#print "Coverage to Count DoGs reads..."
if version > 2240:
	annota_cov=annot_sort.coverage(reads,sorted=True,s=S,split=True, g=G)
else :
	annota_cov=reads.coverage(annot_sort,sorted=True,s=S,split=True, g=G)
	
df_cov=pybedtools.BedTool.to_dataframe(annota_cov)
df_cov.columns=range(0,df_cov.shape[1])

read_num=df_cov.iloc[:,6]
kread_length=df_cov.iloc[:,8]/1000


idx_stat = pysam.idxstats(path_bam)
stat_string=idx_stat.split("\n")

count=0;
for k in range(0,len(stat_string)):
	temp=stat_string[k].split("\t")
	if len(stat_string[k].split("\t")) > 2:
		count=count+int(temp[2])
	
number_lines = count;
tot_reads_m=number_lines/1000000;
rpkm= np.divide(read_num,kread_length)/tot_reads_m

df_all_data=df_cov.iloc[:,[0,1,2,3,4,5]]
df_all_data=df_all_data.join([rpkm])

df_all_data['DoG_length']=df_all_data.iloc[:,2]-df_all_data.iloc[:,1]

df_all_data.columns=['chromosome','start','end','DoG_name','score','strand','DoG_rpkm','DoG_length']

df_all_data=df_all_data[['DoG_name','chromosome','start','end','DoG_length','strand','DoG_rpkm']]

path_dog_annot_temp="%s/DoGs_rpkm_table%s.csv" % (output_path,out_name) ;

df_all_data.to_csv(path_dog_annot_temp)

print "Done, output file : %s" %(path_dog_annot_temp)




